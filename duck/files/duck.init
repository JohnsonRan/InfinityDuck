#!/bin/sh /etc/rc.common
# Copyright (C) 2023 Tianling Shen <cnsztl@immortalwrt.org>

USE_PROCD=1
START=99

extra_command "hot_reload" "Hot-reload service"

CONF="duck"
PROG="/usr/bin/dae"
LOG_DIR="/var/log/duck"

log_message() {
    local msg="$1"
    local level="${2:-info}"
    
    mkdir -p "$LOG_DIR"
    
    local timestamp=$(date "+%Y-%m-%d %H:%M:%S")
    echo "[$timestamp] [duck] [$level] $msg" >> "$LOG_DIR/duck.log"
}

start_service() {
	config_load "$CONF"

	local enabled
	config_get_bool enabled "config" "enabled" "0"
	[ "$enabled" -eq "1" ] || return 1

	local delay
	config_get delay "config" "delay" "0"
	
	local config_file
	config_get config_file "config" "config_file" "/etc/duck/config.dae"
	
	local subscribe_url
	config_get subscribe_url "config" "subscribe_url" ""

	if [ "$delay" -gt 0 ]; then
		log_message "Starting after $delay seconds..."
		sleep "$delay"
	fi
	
	if [ -n "$subscribe_url" ]; then
		TMP_CONF="/etc/duck/config.tmp.dae"
		mkdir -p /etc/duck
		[ -f "$config_file" ] && cp -f "$config_file" "/etc/duck/config.dae.bak"
		
		log_message "Downloading configuration from $subscribe_url"
		if ! wget -q --timeout=8 -O "$TMP_CONF" "$subscribe_url"; then
			log_message "Failed to download configuration, using existing one" "warn"
			rm -f "$TMP_CONF"
		else
			chmod 0600 $TMP_CONF
			if "$PROG" validate -c "$TMP_CONF"; then
				mv -f "$TMP_CONF" "$config_file"
				log_message "Successfully updated configuration"
			else
				log_message "Downloaded configuration is invalid, using existing one" "warn"
				rm -f "$TMP_CONF"
				mv -f "/etc/duck/config.dae.bak" "$config_file"
			fi
		fi
	fi

	"$PROG" validate -c "$config_file" || {
		log_message "Invalid configuration file: $config_file" "error"
		return 1
	}

	local log_maxbackups log_maxsize
	config_get log_maxbackups "config" "log_maxbackups" "1"
	config_get log_maxsize "config" "log_maxsize" "1"
	
	procd_open_instance "$CONF"
	procd_set_param command "$PROG" run
	procd_append_param command --config "$config_file"
	procd_append_param command --disable-timestamp
	procd_append_param command --logfile "$LOG_DIR/duck.log"
	procd_append_param command --logfile-maxbackups "$log_maxbackups"
	procd_append_param command --logfile-maxsize "$log_maxsize"

	procd_set_param limits core="unlimited"
	procd_set_param limits nofile="1000000 1000000"
	procd_set_param respawn
	# procd_set_param stdout 1
	procd_set_param stderr 1

	procd_close_instance
	log_message "InfinityDuck started successfully"
}

stop_service() {
	log_message "Stopping service"
	rm -rf "$LOG_DIR"
}

service_triggers() {
	procd_add_reload_trigger "$CONF"
}

hot_reload() {
	if /etc/init.d/duck running; then
		log_message "Hot-reloading InfinityDuck"
		"$PROG" reload "$(cat /var/run/dae.pid)"
	else
		log_message "InfinityDuck is not running, cannot hot-reload" "warn"
	fi
}